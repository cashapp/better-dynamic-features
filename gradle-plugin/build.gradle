import com.google.devtools.ksp.gradle.KspTaskJvm
import com.squareup.wire.gradle.WireTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  id("app.cash.better-dynamic-features.convention")
  alias(libs.plugins.ksp)
  id("java-gradle-plugin")
  alias(libs.plugins.publish)
  alias(libs.plugins.spotless)
  alias(libs.plugins.wire)
}

gradlePlugin {
  plugins {
    betterDynamicFeatures {
      id = 'app.cash.better.dynamic.features'
      implementationClass = 'app.cash.better.dynamic.features.BetterDynamicFeaturesPlugin'
    }
  }
}

sourceSets {
  main.kotlin.srcDir "$buildDir/gen"
}

dependencies {
  ksp(libs.moshi.codegen)

  implementation gradleApi()
  implementation(libs.agp)
  implementation(libs.javassist)
  implementation(libs.kotlin.gradle)
  implementation(libs.moshi.core)
  implementation(libs.moshi.kotlin)
  implementation(files("libs/ARSCLib-1.1.5.jar"))

  compileOnly(libs.google.guava)
  compileOnly(libs.google.gson)
  compileOnly(libs.android.common)
  compileOnly(libs.android.sdkCommon)

  testImplementation(libs.junit)
  testImplementation(libs.truth)
}

publishing {
  repositories {
    maven {
      name = "installLocally"
      url = "${rootProject.buildDir}/localMaven"
    }
    /**
     * Want to push to an internal repository for testing?
     * Set the following properties in ~/.gradle/gradle.properties.
     *
     * internalUrl=YOUR_INTERNAL_URL
     * internalUsername=YOUR_USERNAME
     * internalPassword=YOUR_PASSWORD
     */
    maven {
      name = "internal"
      url = providers.gradleProperty("internalUrl")
      credentials(PasswordCredentials)
    }
  }
}

def pluginVersion = tasks.register("pluginVersion") {
  def outputDir = file("$buildDir/gen")

  inputs.property 'version', version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/app/cash/better/dynamic/features/Version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.better.dynamic.features

val TARGET_AGP_VERSION = "${libs.versions.agp.get()}"
"""
  }
}

tasks.withType(KotlinCompile).configureEach { dependsOn(pluginVersion) }
tasks.withType(KspTaskJvm).configureEach { dependsOn(pluginVersion) }

wire {
  kotlin {}
}

// https://github.com/square/wire/issues/2335
afterEvaluate {
  tasks.withType(KspTaskJvm).configureEach {
    dependsOn(tasks.withType(WireTask))
  }
}
